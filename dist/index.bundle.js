(()=>{"use strict";var e={620:function(e,t){var n,s,o,r=this&&this.__classPrivateFieldGet||function(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.composeRegex=t.ColumnElement=void 0,t.ColumnElement=class{constructor(e){n.add(this),this.value=0,this.missingValue=0,this.unpackElement(e)}unpackElement(e){this.id=e.id,this.cards=e.getElementsByClassName("project-card"),this.columnCounter=e.getElementsByClassName("js-column-card-count")[0],this.resetText=this.columnCounter.textContent}calculateValue(e){r(this,n,"m",s).call(this);for(const t of this.cards)if(t.dataset.cardType.includes("issue")){const s=t.getElementsByClassName("IssueLabel"),i=r(this,n,"m",o).call(this,s,e);"number"==typeof i?this.value+=i:this.missingValue++}}rewriteCounter(e){this.columnCounter.textContent=`${e}: ${this.value.toFixed(1)} | missing: ${this.missingValue}`}resetCounter(){this.columnCounter.textContent=this.resetText}},n=new WeakSet,s=function(){this.value=0,this.missingValue=0},o=function(e,t){for(const n of e){const e=n.textContent.match(t);if(e)return parseFloat(e[1])}return null},t.composeRegex=function(e){return new RegExp(`.*${e}.*?(\\d+\\.?[\\d]*).*`)}}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var r=t[s]={exports:{}};return e[s].call(r.exports,r,r.exports,n),r.exports}(()=>{const e=n(620);let t;const s=function(){const t=document.getElementsByClassName("project-column");let n=[];for(const s of t)s instanceof HTMLElement&&n.push(new e.ColumnElement(s));return n}();function o(t,n){!function(t){const n=(0,e.composeRegex)(t);for(const e of s)e.calculateValue(n),e.rewriteCounter(t)}(t),n()}browser.runtime.onMessage.addListener((e=>{t&&t.disconnect(),"mutate"==e.task?(o(e.filter,(()=>{})),function(e){const n=document.getElementsByClassName("project-columns")[0],s={childList:!0,subtree:!0},r=function(e,t=500){let n;return()=>{clearTimeout(n),n=setTimeout((()=>{e()}),t)}}((()=>o(e,(()=>{t.disconnect(),t.observe(n,s)}))));t=new MutationObserver(r),t.observe(n,s)}(e.filter)):"reset"==e.task&&function(){for(const e of s)e.resetCounter()}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,