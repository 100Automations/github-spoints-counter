(()=>{"use strict";var e={620:function(e,t){var n,s,o,r=this&&this.__classPrivateFieldGet||function(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.composeRegex=t.ColumnElement=void 0,t.ColumnElement=class{constructor(e){n.add(this),this.value=0,this.missingValue=0,this.unpackElement(e)}unpackElement(e){this.id=e.id,this.cards=e.getElementsByClassName("project-card"),this.columnCounter=e.getElementsByClassName("js-column-card-count")[0],this.resetText=this.columnCounter.textContent}calculateValue(e){r(this,n,"m",s).call(this);for(const t of this.cards)if(t.dataset.cardType.includes("issue")&&!t.classList.contains("d-none")){const s=t.getElementsByClassName("IssueLabel"),c=r(this,n,"m",o).call(this,s,e);"number"==typeof c?this.value+=c:this.missingValue++}}rewriteCounter(e){this.columnCounter.textContent=`${e}: ${this.value.toFixed(1)} | missing: ${this.missingValue}`}resetCounter(){this.columnCounter.textContent=this.resetText}},n=new WeakSet,s=function(){this.value=0,this.missingValue=0},o=function(e,t){for(const n of e){const e=n.textContent.match(t);if(e)return parseFloat(e[1])}return null},t.composeRegex=function(e){return new RegExp(`.*${e}.*?(\\d+\\.?[\\d]*).*`)}},828:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setData=t.getData=void 0,t.getData=function(e){return browser.storage.local.get(e)},t.setData=function(e){return browser.storage.local.set(e)}},593:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0,t.debounce=function(e,t=500){let n;return()=>{clearTimeout(n),n=setTimeout((()=>{e()}),t)}}}},t={};function n(s){var o=t[s];if(void 0!==o)return o.exports;var r=t[s]={exports:{}};return e[s].call(r.exports,r,r.exports,n),r.exports}(()=>{const e=n(620),t=n(828),s=n(593);let o;const r=function(){const t=document.getElementsByClassName("project-column");let n=[];for(const s of t)s instanceof HTMLElement&&n.push(new e.ColumnElement(s));return n}();function c(e,t){const n=document.getElementsByClassName("project-columns")[0],r={childList:!0,subtree:!0},c=(0,s.debounce)((()=>a(e,(()=>{o.disconnect(),o.observe(n,r)}))),t);o=new MutationObserver(c),o.observe(n,r)}function a(t,n){!function(t){const n=(0,e.composeRegex)(t);for(const e of r)e.calculateValue(n),e.rewriteCounter(t)}(t),n()}browser.runtime.onMessage.addListener((e=>{o&&o.disconnect(),"mutate"==e.task?(a(e.filter,(()=>{})),c(e.filter,500)):"reset"==e.task&&function(){for(const e of r)e.resetCounter()}()})),(0,t.getData)({rows:[],currentOn:null}).then((e=>{a(e.rows[e.currentOn].text,(()=>{})),c(e.rows[e.currentOn].text,1e3)})).catch((e=>{console.log(e)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,