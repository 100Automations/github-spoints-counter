(()=>{"use strict";var e={620:function(e,t){var s,n,o,r=this&&this.__classPrivateFieldGet||function(e,t,s,n){if("a"===s&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===s?n:"a"===s?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.composeRegex=t.rewriteColumns=t.collectColumns=t.ColumnElement=void 0;class i{constructor(e){s.add(this),this.value=0,this.missingValue=0,this.unpackElement(e)}unpackElement(e){this.id=e.id,this.cards=e.getElementsByClassName("project-card"),this.columnCounter=e.getElementsByClassName("js-column-card-count")[0],this.resetText=this.columnCounter.textContent}calculateValue(e){r(this,s,"m",n).call(this);for(const t of this.cards)if(t.dataset.cardType.includes("issue")){const n=t.getElementsByClassName("IssueLabel"),i=r(this,s,"m",o).call(this,n,e);"number"==typeof i?this.value+=i:this.missingValue++}}rewriteCounter(e){this.columnCounter.textContent=`${e}: ${this.value.toFixed(1)} | missing: ${this.missingValue}`}resetCounter(){this.columnCounter.textContent=this.resetText}}function l(e){return new RegExp(`.*${e}.*?(\\d+\\.?[\\d]*).*`)}t.ColumnElement=i,s=new WeakSet,n=function(){this.value=0,this.missingValue=0},o=function(e,t){for(const s of e){const e=s.textContent.match(t);if(e)return parseFloat(e[1])}return null},t.collectColumns=function(){const e=document.getElementsByClassName("project-column");let t=[];for(const s of e)s instanceof HTMLElement&&t.push(new i(s));return t},t.rewriteColumns=function(e,t){const s=l(t);for(const n of e)n.calculateValue(s),n.rewriteCounter(t)},t.composeRegex=l}},t={};!function s(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,s),r.exports}(620)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,